import logging
from datetime import datetime, timedelta
import sys
from urllib.parse import quote_plus, urlparse, parse_qs, urlunparse
import aiohttp
import asyncio
import hashlib
import re
import io
import requests
from aiogram.types import CallbackQuery
from aiogram.types.web_app_info import WebAppInfo
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from googletrans import Translator
from bs4 import BeautifulSoup
from telethon.tl.types import Channel, Message
from aiogram.utils.exceptions import RetryAfter, ChatNotFound, BotBlocked, UserDeactivated, ChatAdminRequired, \
    BadRequest, MessageToDeleteNotFound
from telethon.sync import TelegramClient
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher.handler import CancelHandler
from aiohttp import ClientSession, ClientTimeout, ClientError
from loguru import logger

from PIL import Image
import sqlite3
import aiogram
import random
import string

from telethon.errors import FloodWaitError, AuthKeyUnregisteredError
import openpyxl
import tempfile


logging.basicConfig(level=logging.INFO)

translator = Translator()

start_date = datetime.now()
yesterday = datetime.now() - timedelta(days=1)

# –¢–æ–∫–µ–Ω—ã –¥–ª—è –±–æ—Ç–∞ –∏ API Telegram
BOT_TOKEN = "7018842306:AAGCJZXS98HB85dVYTu1Apyr5Q2lWcaN1kE"
VK_ACCESS_TOKEN = 'a4e86edea4e86edea4e86edeeba7ff283aaa4e8a4e86edec125d5322b959b7255f8d0e5'
YOUTUBE_API_KEY = 'AIzaSyCCsvN5SlVqyUbkWfTFve-3Z4dX8Wl7vwk'
YOUR_CSE_ID = '26a28bb54345d4d87'

api_id = 22779709
api_hash = '15a6b8ad9c9d2699047c9168509aeeb2'
session_file_name = 'moxy'  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏

CHANNEL_ID = '@Shmox1337'  # ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 5429082466

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

logger.remove()
logger.add(sys.stderr, level="INFO")

sent_telegraph_links = set()

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –ø–æ–∏—Å–∫–∞
search_tasks = {}

# –í –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
sent_posts = set()

user_ids = set()

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞–º–µ–Ω–∏—Ç–µ user_ids –Ω–∞ user_data)
user_data = {}

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_apps = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_users = {}


class Form(StatesGroup):
    vk_search = State()  # State for VK search
    instagram_search = State()  # State for Instagram search
    sending_links = State()  # State for sending links
    showing_more_posts = State()  # State for showing more posts
    waiting_for_browser_search = State()
    yandex_browser_search = State()  # Add this for Yandex Browser search
    global_search = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    vk_search_type = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞ –í–ö
    vk_pars_search = State()  # State for VK parsing search
    vk_account_parse = State()
    vk_parse = State()

class MyStates(StatesGroup):
    waiting_for_keyword = State()
    waiting_for_telegram_publics_keyword = State()  # State for Telegram publics search
    waiting_for_telegraph_keyword = State()  # State for Telegraph search
    sending_links = State()
    offset = State()
    waiting_for_youtube_search = State()  # State for YouTube search
    waiting_for_next_page = State()
    waiting_for_browser_search = State()
    choosing_time_period = State()  # New state for choosing the search time period
    waiting_for_google_search_keyword = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ Google
    sent_message_ids = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π


class YoutubeSearchState(StatesGroup):
    searching = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ YouTube
    next_page_token = State()  # –¢–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤


class SearchType(StatesGroup):
    choosing_search_type = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
    choosing_google_search_type = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞ –≤ Google
    choosing_year = State()  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
class InstagramSearch(StatesGroup):
    showing_results = State()


# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
class InstagramPagination(StatesGroup):
    showing_results = State()
    confirm_continuation = State()


class SearchStates(StatesGroup):
    waiting_for_browser_search = State()
    choosing_my_apps = State()
    choosing_time_period = State()  # Ensure this line is added correctly
    choosing_year = State()

class AddPromoStates(StatesGroup):
    addpromo_count = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    addpromo_amount = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞

# –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –≤–∞—à exclusion_list —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
exclusion_list = [
    "files.fm",
    "YztOEovieQIzZjY8",
    "DELETED",
    "@mdisk_movie_search_robot",
    "@jugaadlife",
    "@exploits",
    "https://t.me/SLlV_INTIM_BOT",
    "üõë üëâüèªüëâüèªüëâüèª –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–û–°–¢–£–ü–ù–ê –ó–î–ï–°–¨ –ñ–ú–ò–¢–ï üëàüèªüëàüèªüëàüèª",
    "‚û°‚û°‚û° KLICKEN HIER!",
    "üëâüèªüëâüèªüëâüèª WSZYSTKIE INFORMACJE DOSTƒòPNE TUTAJ KLIKNIJüëàüèªüëàüèªüëàüèª",
    "üîû KLIKNIJ TUTAJ, ABY UZYSKAƒÜ WIƒòCEJ INFORMACJI üëàüèªüëàüèªüëàüèª",
    "üõë üëâüèªüëâüèªüëâüèª",
    "https://t.me/spacemalware",
    "https://t.me/OneTelegramSpy_bot",
    # –î–æ–±–∞–≤–∏–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è "–∫—Ä–∞—Å–Ω—ã—Ö" URL –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
    r"https?://(?:www\.)?example\.com/banned_content"
]


@dp.message_handler(commands=['userlist'], state="*")
async def show_users_count(message: types.Message):
    count = len(user_data)  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="show_user_list"))
    await message.answer(f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö –±–æ—Ç–∞: {count}", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == 'show_user_list', state="*")
async def show_user_list(callback_query: types.CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö ID –∏ –∏–º–µ–Ω–∞–º–∏
    user_list = "\n".join(f"ID: {user_id} - –ò–º—è: {user_name}" for user_id, user_name in sorted(user_data.items()))
    await callback_query.message.answer(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_list}")
    await callback_query.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ


async def show_notification(message: types.Message):
    try:
        await bot.send_message(
            message.chat.id,
            text='–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!',
            parse_mode='MarkdownV2',
        )
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


async def on_process_message(message: types.Message):
    user_id = message.from_user.id
    try:
        status = await bot.get_chat_member(CHANNEL_ID, user_id)
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        if status.status not in ["member", "administrator", "creator"]:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID.lstrip('@')}"))
            keyboard.add(InlineKeyboardButton("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è(–ª–∞—Å—å)", callback_data="check_subscription"))

            if message is not None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.answer(
                    "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                    reply_markup=keyboard
                )
            raise CancelHandler()
    except (ChatNotFound, BotBlocked, UserDeactivated, ChatAdminRequired, BadRequest) as e:
        logger.error(f"Subscription check failed: {e}")
        if message is not None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await show_notification(message)
        raise CancelHandler()


class SubscriptionMiddleware(BaseMiddleware):
    pass


dp.middleware.setup(SubscriptionMiddleware())


async def check_subscription(message: types.Message) -> bool:
    user_id = message.from_user.id
    try:
        status = await bot.get_chat_member(CHANNEL_ID, user_id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª
        return status and status.status not in ["left", "kicked"]
    except (ChatNotFound, BotBlocked, UserDeactivated, ChatAdminRequired, BadRequest):
        return False


@dp.callback_query_handler(lambda c: c.data == 'check_subscription', state="*")
async def process_check_subscription_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    try:
        member_status = await bot.get_chat_member(CHANNEL_ID, user_id)
        if member_status.status in ["member", "administrator", "creator"]:
            await start(callback_query.message, state)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        else:
            await callback_query.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!")
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID.lstrip('@')}"))
            keyboard.add(InlineKeyboardButton("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è(–ª–∞—Å—å)", callback_data="check_subscription"))
            await callback_query.message.edit_text(
                "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Subscription check failed: {e}")
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ show_notification
        await show_notification(callback_query.message)


def update_user_activity(user_id):
    if user_id != 5429082466:  # –ó–∞–º–µ–Ω–∏—Ç–µ BOT_ID –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
        active_users[user_id] = datetime.now()


def get_online_users_count():
    five_minutes_ago = datetime.now() - timedelta(minutes=60)
    return sum(1 for last_active in active_users.values() if last_active > five_minutes_ago)

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—É
conn = sqlite3.connect('subscriptions.db')
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                  user_id INTEGER PRIMARY KEY,
                  subscription_type TEXT,
                  subscription_expiry TEXT,
                  daily_request_limit INTEGER
               )''')

conn.commit()
conn.close()


def add_user(user_id, subscription_type, subscription_expiry, daily_request_limit):
    conn = sqlite3.connect('subscriptions.db')
    cursor = conn.cursor()

    cursor.execute('''INSERT INTO users (user_id, subscription_type, subscription_expiry, daily_request_limit)
                      VALUES (?, ?, ?, ?)''', (user_id, subscription_type, subscription_expiry, daily_request_limit))

    conn.commit()
    conn.close()


def get_subscription(user_id):
    conn = sqlite3.connect('subscriptions.db')
    cursor = conn.cursor()

    cursor.execute('''SELECT subscription_type, subscription_expiry, daily_request_limit 
                      FROM users WHERE user_id=?''', (user_id,))

    subscription_info = cursor.fetchone()

    conn.close()

    return subscription_info


# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã
conn = sqlite3.connect('subscriptions.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                  user_id INTEGER PRIMARY KEY,
                  subscription_type TEXT,
                  subscription_expiry TEXT,
                  daily_request_limit INTEGER
               )''')

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
cursor.execute('''CREATE TABLE IF NOT EXISTS promo_codes (
                  promo_code TEXT PRIMARY KEY,
                  user_id INTEGER,
                  amount INTEGER
               )''')

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—Ä–æ–≤–Ω–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ "Beta"
cursor.execute('''CREATE TABLE IF NOT EXISTS beta_granted_requests (
                  user_id INTEGER PRIMARY KEY,
                  granted_requests INTEGER
               )''')

conn.commit()
conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('users.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—Ç–æ–ª–±—Ü–∞ user_username
cursor.execute('''CREATE TABLE IF NOT EXISTS users
                  (id INTEGER PRIMARY KEY, user_id INTEGER, user_name TEXT, user_username TEXT)''')
conn.commit()

@dp.message_handler(commands=['start'], state="*")
async def start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.full_name  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_username = message.from_user.username  # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
    user_data[user_id] = user_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä–µ
    update_user_activity(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—á–µ—Ç—á–∏–∫ –æ–Ω–ª–∞–π–Ω
    online_users_count = get_online_users_count()  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    existing_user = cursor.fetchone()
    if existing_user is None:
        # –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("INSERT INTO users (user_id, user_name, user_username) VALUES (?, ?, ?)", (user_id, user_name, user_username))
        conn.commit()
    await state.reset_state()  # –û—á–∏—â–∞–µ–º –ª—é–±–æ–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è —á–∏—Å—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
    if await check_subscription(message):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω; –ø–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏.
        welcome_text = f"*–¢–µ–∫—É—â–∏–π –æ–Ω–ª–∞–π–Ω: {online_users_count}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ, –≥–¥–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫:*"
        keyboard = InlineKeyboardMarkup(row_width=2)
        buttons = [
            InlineKeyboardButton("–í–∫–æ–Ω—Ç–∞–∫—Ç–µ üòä", callback_data="vk_search_type"),
            InlineKeyboardButton("–ò–Ω—Å—Ç–∞–≥—Ä–∞–º üì∏", callback_data="instagram"),
            InlineKeyboardButton("YouTube üé•", callback_data="youtube"),
            InlineKeyboardButton("Google üåê", callback_data="google_search"),
            InlineKeyboardButton("Telegraph üì≤", callback_data="telegraph"),
            InlineKeyboardButton("–¢–≥ –ü–∞–±–ª–∏–∫–∏ üì¢", callback_data="telegram_publics"),
            InlineKeyboardButton('–ù–µ–π—Ä–æ—Å–µ—Ç—å üß†',
                                 web_app=WebAppInfo(url='https://perchance.org/fusion-ai-image-generator')),
            InlineKeyboardButton("‚ûï –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üì±", callback_data="websearch"),
            InlineKeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§", callback_data="personal_cabinet")
        ]

        keyboard.add(*buttons)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer_photo(photo=open("Frame 14.png", "rb"),
                                   caption=welcome_text,
                                   reply_markup=keyboard,
                                   parse_mode="Markdown",
                                   disable_notification=True)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω; –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("*–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª*", url=f"https://t.me/Shmox1337"))
        await message.answer("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:",
                             reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users
@dp.message_handler(commands=['users'])
async def users_list(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id != ADMIN_ID:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT user_id, user_name, user_username FROM users")
    users = cursor.fetchall()

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
    text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for user in users:
        text += f"ID: {user[0]}, –ò–º—è: {user[1]}, Username: @{user[2]}\n"

    # –ó–∞–ø–∏—Å—å —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UTF-8
    with open("users_list.txt", "w", encoding="utf-8") as file:
        file.write(text)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open("users_list.txt", "rb") as file:
        await message.answer_document(file, caption="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")



# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message_handler(commands=['help'], state="*")
async def help_command(message: types.Message):
    help_text = """```
*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤:*
1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –≤–∞–º —Å–æ—Ü—Å–µ—Ç—å.
2. –ù–∞–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –≤ –ø–æ—Å—Ç–µ.
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞.

*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Å–∞–π—Ç–∞):*
1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "+ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ".
2. –°–∫–∏–Ω—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.  
3. –í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
    –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–≤–æ–∏ 
    –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.      
4. –ï—Å–ª–∏ –≤—ã –≤—ã–±–µ—Ä–µ—Ç–µ "–¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
    –æ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ
    "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è".```
    """

    await message.answer(help_text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(lambda message: message.text == "–ú–µ–Ω—é", state="*")
async def show_menu(message: types.Message):
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å—á–µ—Ç—á–∏–∫ –æ–Ω–ª–∞–π–Ω–∞
    update_user_activity(message.from_user.id)

    # –¢–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    welcome_text = "*–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:*"
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton("–í–∫–æ–Ω—Ç–∞–∫—Ç–µ üòä", callback_data="vk_search_type"),
        InlineKeyboardButton("–ò–Ω—Å—Ç–∞–≥—Ä–∞–º üì∏", callback_data="instagram"),
        InlineKeyboardButton("YouTube üé•", callback_data="youtube"),
        InlineKeyboardButton("Google üåê", callback_data="google_search"),
        InlineKeyboardButton("Telegraph üì≤", callback_data="telegraph"),
        InlineKeyboardButton("–¢–≥ –ü–∞–±–ª–∏–∫–∏ üì¢", callback_data="telegram_publics"),
        InlineKeyboardButton('–ù–µ–π—Ä–æ—Å–µ—Ç—å üß†',
                             web_app=WebAppInfo(url='https://perchance.org/fusion-ai-image-generator')),
        InlineKeyboardButton("‚ûï –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üì±", callback_data="websearch"),
        InlineKeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§", callback_data="personal_cabinet")
    ]

    keyboard.add(*buttons)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    with open("Frame 14.png", "rb") as photo:
        await message.answer_photo(photo=photo, caption=welcome_text, reply_markup=keyboard, parse_mode="Markdown",
                                   disable_notification=True)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_subscription(user_id, subscription_type, subscription_expiry, daily_request_limit):
    conn = sqlite3.connect('subscriptions.db')
    cursor = conn.cursor()

    cursor.execute('''UPDATE users 
                      SET subscription_type=?, subscription_expiry=?, daily_request_limit=?
                      WHERE user_id=?''', (subscription_type, subscription_expiry, daily_request_limit, user_id))

    conn.commit()
    conn.close()


def update_request_limit(user_id):
    conn = sqlite3.connect('subscriptions.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    cursor.execute('''SELECT daily_request_limit FROM users WHERE user_id=?''', (user_id,))
    current_limit = cursor.fetchone()[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    if current_limit > 0:
        # –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 1 –∑–Ω–∞—á–µ–Ω–∏–µ daily_request_limit –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''UPDATE users SET daily_request_limit = daily_request_limit - 0.5 WHERE user_id=?''', (user_id,))
        conn.commit()
        conn.close()
        return True  # –£—Å–ø–µ—à–Ω–æ —É–º–µ–Ω—å—à–∏–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
    else:
        conn.close()
        return False  # –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
def generate_promo_code(amount):
    conn = sqlite3.connect('subscriptions.db')
    cursor = conn.cursor()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
    promo_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('''INSERT INTO promo_codes (promo_code, amount) VALUES (?, ?)''', (promo_code, amount))

    conn.commit()
    conn.close()

    return promo_code

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
def use_promo_code(user_id, promo_code):
    conn = sqlite3.connect('subscriptions.db')
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
    cursor.execute('''SELECT amount FROM promo_codes WHERE promo_code=? AND user_id IS NULL''', (promo_code,))
    promo_info = cursor.fetchone()

    if promo_info:
        amount = promo_info[0]
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''UPDATE users SET daily_request_limit = daily_request_limit + ? WHERE user_id=?''', (amount, user_id))
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        cursor.execute('''UPDATE promo_codes SET user_id=? WHERE promo_code=?''', (user_id, promo_code))
        conn.commit()
        conn.close()
        return f"–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} –∑–∞–ø—Ä–æ—Å–æ–≤."
    else:
        conn.close()
        return "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω."


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /addpromo –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(commands=['addpromo'], state="*")
async def generate_promo_code_admin(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id == 5429082466:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, –∞ –∑–∞—Ç–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ù–∞–ø—Ä–∏–º–µ—Ä: 5 10")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ—Å—å –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        await AddPromoStates.addpromo_count.set()
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message_handler(state=AddPromoStates.addpromo_count)
async def set_addpromo_count(message: types.Message, state: FSMContext):
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        count, amount = map(int, message.text.split())
        if count <= 0 or amount <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤
        promo_codes = [generate_promo_code(amount) for _ in range(count)]
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        promo_codes_formatted = '\n'.join([f'<code>{code}</code>' for code in promo_codes])
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ –±–ª–æ–∫–∞ –∫–æ–¥–∞
        await message.answer(promo_codes_formatted, parse_mode="HTML")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message_handler(state=AddPromoStates.addpromo_amount)
async def set_addpromo_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        addpromo_count = data.get('addpromo_count')

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤
        for _ in range(addpromo_count):
            generate_promo_code(amount)

        await message.answer(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {addpromo_count} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–∞ {amount} –∑–∞–ø—Ä–æ—Å–æ–≤.")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /promo –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message_handler(commands=['promo'], state="*")
async def start_promo(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥.")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await state.set_state("waiting_code")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º
@dp.message_handler(state="waiting_code", content_types=types.ContentType.TEXT)
async def handle_promo_message(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    promo_code = message.text.upper()  # –ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É

    # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    response = use_promo_code(message.from_user.id, promo_code)
    await message.answer(response)
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()



@dp.callback_query_handler(lambda query: query.data == "personal_cabinet", state="*")
async def show_personal_cabinet(callback_query: types.CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    await callback_query.message.delete()

    user_id = callback_query.from_user.id
    user_name = callback_query.from_user.full_name
    user_subscription_level = get_subscription_level(user_id)
    remaining_requests = get_remaining_requests(user_id)  # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã
    cabinet_text = f"–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç {user_name}\n–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_requests}üîé"
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω üîé", callback_data="subscription"),
        InlineKeyboardButton("–ú–æ–∏ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è üì±", callback_data="my_apps"),
        InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ü§ù", url="https://t.me/Shmoxy"),
        InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="back_so_kabinet")
    )
    await callback_query.message.answer(cabinet_text, reply_markup=keyboard)

    await state.finish()


def get_remaining_requests(user_id):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    subscription_info = get_subscription(user_id)
    if subscription_info:
        subscription_type, _, daily_request_limit = subscription_info
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è
        remaining_requests = calculate_remaining_requests(user_id, subscription_type, daily_request_limit)
        return remaining_requests
    else:
        return "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏"


def calculate_remaining_requests(user_id, subscription_type, daily_request_limit):
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–µ–º daily_request_limit
    return daily_request_limit


def get_subscription_level(user_id):
    conn = sqlite3.connect('subscriptions.db')
    cursor = conn.cursor()

    cursor.execute('''SELECT subscription_type FROM users WHERE user_id=?''', (user_id,))
    subscription_info = cursor.fetchone()

    if subscription_info:
        subscription_type = subscription_info[0]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—Ä–æ–≤–Ω–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ "Beta"
        cursor.execute('''SELECT granted_requests FROM beta_granted_requests WHERE user_id=?''', (user_id,))
        granted_requests = cursor.fetchone()
        if subscription_type == "Beta" and not granted_requests:
            # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
            cursor.execute('''INSERT INTO beta_granted_requests (user_id, granted_requests) VALUES (?, ?)''', (user_id, 1))
            conn.commit()
            # –î–æ–±–∞–≤–ª—è–µ–º 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —É—Ä–æ–≤–Ω–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ "Beta"
            cursor.execute('''UPDATE users SET daily_request_limit = daily_request_limit + 5 WHERE user_id=?''', (user_id,))
            conn.commit()
        conn.close()
        return subscription_type
    else:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –≤—ã–¥–∞–µ–º –µ–º—É Beta –ø–æ–¥–ø–∏—Å–∫—É —Å 5 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
        add_user(user_id, 'Beta', '', 5)
        conn.close()
        return "Beta"


# –°–ª–æ–≤–∞—Ä—å —Ü–µ–Ω –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
subscription_prices = {
    "watson": 230,
    "sherlock": 430,
    "FBI": 1830,
    "Beta": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
}

@dp.callback_query_handler(lambda query: query.data == "subscription", state="*")
async def handle_subscription(callback_query: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    await callback_query.message.delete()

    user_name = callback_query.from_user.full_name
    message_text = f"{user_name}. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏."

    keyboard = InlineKeyboardMarkup(row_width=1)
    buttons = [
        InlineKeyboardButton("50üîé - 230 —Ä—É–±", callback_data="subscribe_watson"),
        InlineKeyboardButton("100üîé - 430 —Ä—É–±", callback_data="subscribe_sherlock"),
        InlineKeyboardButton("500üîé - 1830 —Ä—É–±", callback_data="subscribe_FBI"),
        InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="personal_cabinet")
    ]
    keyboard.add(*buttons)

    await callback_query.message.answer(message_text, reply_markup=keyboard)


@dp.callback_query_handler(lambda query: query.data.startswith("subscribe_"), state="*")
async def handle_subscribe(callback_query: types.CallbackQuery):
    subscription_type = callback_query.data.split("_")[1]

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–¥–ø–∏—Å–∫–∏
    await callback_query.message.delete()

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Ü–µ–Ω
    price = subscription_prices.get(subscription_type, "–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    # –î–æ–ø—É—Å—Ç–∏–º, –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_descriptions = {
        "watson": "–ü–æ–¥–ø–∏—Å–∫–∞ –í–∞—Ç—Å–æ–Ω –¥–∞–µ—Ç 50üîé –∑–∞–ø—Ä–æ—Å–æ–≤.",
        "sherlock": "–ü–æ–¥–ø–∏—Å–∫–∞ –®–µ—Ä–ª–æ–∫ –¥–∞–µ—Ç 100üîé –∑–∞–ø—Ä–æ—Å–æ–≤.",
        "FBI": "–ü–æ–¥–ø–∏—Å–∫–∞ FBI –¥–∞–µ—Ç 500üîé –∑–∞–ø—Ä–æ—Å–æ–≤.",
    }

    description = subscription_descriptions.get(subscription_type, "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_paths = {
        "watson": "OIG1 (2).jpg",
        "sherlock": "OIG1 (1).jpg",
        "FBI": "OIG2.jpg"
    }
    image_path = image_paths.get(subscription_type)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –∏ –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ Beta –ø–æ–¥–ø–∏—Å–∫–∞)
    keyboard = InlineKeyboardMarkup(row_width=1)
    if subscription_type != "Beta":
        keyboard.add(
            InlineKeyboardButton(f"–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–∫—É–ø–∫—É",
                                 callback_data=f"purchase_{subscription_type}_{price}"),
        )
    keyboard.add(
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="subscription")
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∫–Ω–æ–ø–∫–æ–π –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ Beta –ø–æ–¥–ø–∏—Å–∫–∞)
    with open(image_path, "rb") as photo:
        caption = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∫—É–ø–∫—É {subscription_type.capitalize()}.\n\n{description}"
        await callback_query.message.answer_photo(
            photo=photo,
            caption=caption,
            reply_markup=keyboard
        )

def update_requests_after_purchase(user_id, subscription_type):
    conn = sqlite3.connect('subscriptions.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö —Å —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
    additional_requests = get_additional_requests_for_subscription(subscription_type)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('''UPDATE users SET daily_request_limit = daily_request_limit + ? WHERE user_id=?''',
                   (additional_requests, user_id))
    conn.commit()
    conn.close()

def get_additional_requests_for_subscription(subscription_type):
    additional_requests_map = {
        "watson": 50,
        "sherlock": 100,
        "FBI": 500
    }
    return additional_requests_map.get(subscription_type, 0)
@dp.callback_query_handler(lambda query: query.data.startswith("purchase_"), state="*")
async def handle_purchase(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback_query –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Ü–µ–Ω—ã
        subscription_data = callback_query.data.split("_")
        subscription_type = subscription_data[1]
        price = subscription_data[2]

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', pay=True))
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="subscription"))

        await bot.send_invoice(
            chat_id=callback_query.message.chat.id,
            title='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
            description=f'–û–ø–ª–∞—Ç–∞ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É {subscription_type.capitalize()} - {price} —Ä—É–±–ª–µ–π –≤ –Æ–∫–∞—Å—Å–µ',
            payload=f"–ü–æ–¥–ø–∏—Å–∫–∞_{subscription_type}_{price}",  # –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ —Ü–µ–Ω–µ –≤ payload
            provider_token='390540012:LIVE:50832',
            start_parameter='drive_Booking',
            currency='RUB',
            prices=[types.LabeledPrice(label=f"–ü–æ–¥–ø–∏—Å–∫–∞ {subscription_type.capitalize()}", amount=int(price) * 100)],
            reply_markup=markup
        )

    except Exception as e:
        logging.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await bot.send_message(callback_query.message.chat.id, str(e))

@dp.pre_checkout_query_handler(lambda query: True)
async def process_pre_checkout_query(query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(query.id, ok=True)

@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def got_payment(message: types.Message):
    try:
        invoice_payload = message.successful_payment.invoice_payload
        user_info = f"–î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞: {invoice_payload}"
        await message.answer("–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω. " + user_info)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏–∑ payload
        subscription_info = message.successful_payment.invoice_payload.split("_")[1]

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        update_requests_after_purchase(message.from_user.id, subscription_info)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_menu(message)

    except Exception as e:
        logging.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")



def create_table():
    conn = sqlite3.connect('user_apps.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS user_apps
                 (user_id INTEGER, app_url TEXT)''')
    conn.commit()
    conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_app_to_db(user_id, app_url):
    conn = sqlite3.connect('user_apps.db')
    c = conn.cursor()
    c.execute("INSERT INTO user_apps VALUES (?, ?)", (user_id, app_url))
    conn.commit()
    conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_user_apps(user_id):
    conn = sqlite3.connect('user_apps.db')
    c = conn.cursor()
    c.execute("SELECT app_url FROM user_apps WHERE user_id=?", (user_id,))
    apps = c.fetchall()
    conn.close()
    return [app[0] for app in apps]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def delete_app_from_db(user_id, app_url):
    conn = sqlite3.connect('user_apps.db')
    c = conn.cursor()
    c.execute("DELETE FROM user_apps WHERE user_id=? AND app_url=?", (user_id, app_url))
    conn.commit()
    conn.close()


# –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é create_table() –æ–¥–∏–Ω —Ä–∞–∑ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
create_table()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
@dp.callback_query_handler(lambda c: c.data == 'add_to_my_apps_web', state="*")
async def add_to_my_apps_web(callback_query: types.CallbackQuery, state: FSMContext):
    outer_user_data = await state.get_data()
    user_link = outer_user_data.get('url')

    if user_link:
        user_id = callback_query.from_user.id
        apps_list = get_user_apps(user_id)
        if user_link in apps_list:
            await callback_query.answer('–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
        else:
            add_app_to_db(user_id, user_link)
            await show_personal_cabinet(callback_query, state)
            update_request_limit(user_id)
            update_request_limit(user_id)
            update_request_limit(user_id)
            update_request_limit(user_id)
            update_request_limit(user_id)
            update_request_limit(user_id)
            await callback_query.answer('–°–∞–π—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!')
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –æ–±—ã—á–Ω–æ–º –≤–≤–æ–¥–µ —Å—Å—ã–ª–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'add_to_my_apps', state="*")
async def add_to_my_apps(callback_query: types.CallbackQuery, state: FSMContext):
    outer_user_data = await state.get_data()
    user_link = outer_user_data.get('url')

    if user_link:
        user_id = callback_query.from_user.id
        apps_list = get_user_apps(user_id)
        if user_link in apps_list:
            await callback_query.answer('–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
        else:
            add_app_to_db(user_id, user_link)
            await callback_query.answer('–°–∞–π—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!')
            update_request_limit(user_id)
            update_request_limit(user_id)
            update_request_limit(user_id)
            update_request_limit(user_id)
            update_request_limit(user_id)
            update_request_limit(user_id)
            if callback_query.message:
                await bot.delete_message(chat_id=callback_query.message.chat.id,
                                         message_id=callback_query.message.message_id)
    else:
        await callback_query.answer('–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –µ–≥–æ!')
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫"
@dp.callback_query_handler(text_startswith="addwebsearch")
async def process_websearch_button(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    await callback_query.answer(text="", show_alert=True)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏

    message_to_delete = await callback_query.message.answer(
        "-3üîé –°–∫–∏–Ω—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:")
    await state.update_data(message_to_delete_id=message_to_delete.message_id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å—Å—ã–ª–æ–∫ –∏–∑ –≤–µ–±-–ø–æ–∏—Å–∫–∞
    await state.set_state("addwebsearch")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–í–µ–±-–ø–æ–∏—Å–∫"
@dp.callback_query_handler(text_startswith="websearch")
async def process_websearch_button(callback_query: types.CallbackQuery, state: FSMContext):
    # –£–±–∏—Ä–∞–µ–º —Å–≤–µ—á–µ–Ω–∏–µ
    await callback_query.answer()

    message_to_delete = await callback_query.message.answer(
        "-3üîé –°–∫–∏–Ω—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:")
    await state.update_data(message_to_delete_id=message_to_delete.message_id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å—Å—ã–ª–æ–∫ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    await state.set_state("websearch")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏–∑ –≤–µ–±-–ø–æ–∏—Å–∫–∞
@dp.message_handler(state="addwebsearch", content_types=types.ContentType.TEXT)
async def receive_link_addweb(message: types.Message, state: FSMContext):
    user_link = message.text
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏
    if not user_link.startswith("http"):
        await message.delete()
        return
    domain_name = urlparse(user_link).netloc
    button_text = domain_name if domain_name else user_link
    button = InlineKeyboardButton(button_text, web_app=WebAppInfo(url=user_link))
    keyboard = InlineKeyboardMarkup().add(button)
    await state.update_data(url=user_link)

    add_app_button = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", callback_data="add_to_my_apps_web")
    no_button = InlineKeyboardButton("–ù–µ—Ç", callback_data="personal_cabinet")
    keyboard.row(add_app_button, no_button)

    await message.answer("–û—Ç–∫—Ä—ã—Ç—å –≤–∞—à —Å–∞–π—Ç:", reply_markup=keyboard)

    # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    data = await state.get_data()
    message_to_delete_id = data.get('message_to_delete_id')

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Å—Å—ã–ª–∫–∏
    if message_to_delete_id:
        await bot.delete_message(chat_id=message.chat.id, message_id=message_to_delete_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ message –∏ –Ω–µ –±—ã–ª–æ –ª–∏ –æ–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    if message:
        try:
            await message.delete()
        except aiogram.utils.exceptions.MessageToDeleteNotFound:
            pass

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ message –∏ –Ω–µ –±—ã–ª–æ –ª–∏ –æ–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    if message:
        try:
            await message.delete()
        except aiogram.utils.exceptions.MessageToDeleteNotFound:
            pass

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ message –∏ –Ω–µ –±—ã–ª–æ –ª–∏ –æ–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    if message:
        try:
            await message.delete()
        except aiogram.utils.exceptions.MessageToDeleteNotFound:
            pass


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
@dp.message_handler(state="websearch", content_types=types.ContentType.TEXT)
async def receive_link_web(message: types.Message, state: FSMContext):
    user_link = message.text
    if not user_link.startswith("http"):
        await message.delete()
        return
    domain_name = urlparse(user_link).netloc
    button_text = domain_name if domain_name else user_link
    button = InlineKeyboardButton(button_text, web_app=WebAppInfo(url=user_link))
    keyboard = InlineKeyboardMarkup().add(button)
    await state.update_data(url=user_link)
    add_app_button = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", callback_data="add_to_my_apps")
    no_button = InlineKeyboardButton("–ù–µ—Ç", callback_data="back_kabinet")
    keyboard.row(add_app_button, no_button)
    await message.answer("–û—Ç–∫—Ä—ã—Ç—å –≤–∞—à —Å–∞–π—Ç:", reply_markup=keyboard)

    # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    data = await state.get_data()
    message_to_delete_id = data.get('message_to_delete_id')

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Å—Å—ã–ª–∫–∏
    if message_to_delete_id:
        await bot.delete_message(chat_id=message.chat.id, message_id=message_to_delete_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ message –∏ –Ω–µ –±—ã–ª–æ –ª–∏ –æ–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    if message:
        try:
            await message.delete()
        except aiogram.utils.exceptions.MessageToDeleteNotFound:
            pass


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
@dp.callback_query_handler(lambda query: query.data == "my_apps")
async def handle_my_apps_button(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    apps_list = get_user_apps(user_id)
    if not apps_list:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback_query.message.delete()
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è
        # –≤ –º–µ–Ω—é
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", callback_data="addwebsearch"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="personal_cabinet")  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–µ—Ç"
        )
        message = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?"
        await callback_query.message.answer(message, reply_markup=keyboard)
        return

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    buttons = []
    for index, app_link in enumerate(apps_list):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –∏–∑ URL
        domain_name = urlparse(app_link).netloc
        # –ï—Å–ª–∏ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å URL –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        button_text = domain_name if domain_name else app_link
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º WebAppInfo
        button = InlineKeyboardButton(button_text, web_app=WebAppInfo(url=app_link))
        buttons.append(button)

    buttons.append(InlineKeyboardButton("‚ûï", callback_data="websearch")),
    buttons.append(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", callback_data="delete_app"))
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="personal_cabinet"))

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback_query.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer("–í–∞—à–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:", reply_markup=keyboard)


@dp.callback_query_handler(lambda query: query.data == "delete_app")
async def handle_delete_app_button(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    apps_list = get_user_apps(user_id)
    if not apps_list:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    buttons = [InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {urlparse(app).netloc or app}", callback_data=f"delete_{index}")
               for index, app in enumerate(apps_list)]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="my_apps"))

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    message = await callback_query.message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
                                                  reply_markup=keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å –µ–≥–æ
    await dp.current_state(user=user_id).update_data(delete_message_id=message.message_id)


@dp.callback_query_handler(lambda query: query.data.startswith("delete_"))
async def delete_app_button(callback_query: types.CallbackQuery):
    try:
        app_index = int(callback_query.data.split("_")[1])  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
        user_id = callback_query.from_user.id
        apps_list = get_user_apps(user_id)
        if 0 <= app_index < len(apps_list):
            # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–ø–∏—Å–∫–∞, —É–¥–∞–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É
            deleted_app = apps_list.pop(app_index)
            # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            delete_app_from_db(user_id, deleted_app)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
            await callback_query.answer(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ '{deleted_app}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            buttons = [InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {urlparse(app).netloc or app}", callback_data=f"delete_{index}")
                       for index, app in enumerate(apps_list)]
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            buttons.append(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="my_apps"))
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                        message_id=callback_query.message.message_id,
                                        text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
                                        reply_markup=keyboard)
        else:
            await callback_query.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
    except Exception as e:
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
        print(e)


async def return_to_personal_cabinet(callback_query: types.CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet"))
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
    await callback_query.message.answer("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é
@dp.callback_query_handler(text="back_kabinet", state="*")
async def back_kabinet(callback_query: types.CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    await callback_query.message.delete()
    await callback_query.answer()
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é
@dp.callback_query_handler(text="back_so_kabinet", state="*")
async def back_so_kabinet(callback_query: types.CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    await callback_query.message.delete()
    await callback_query.answer()
    await start(callback_query.message, state)

@dp.callback_query_handler(text="back_so_vk", state="*")
async def back_so_vk(callback_query: types.CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    await callback_query.message.delete()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é
@dp.callback_query_handler(text="back_to_menu", state="*")
async def back_to_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await start(callback_query.message, state)


# ____________________________________________VK_______________________________________________________________________________________________________
async def send_vk_posts_file(message: types.Message, filename: str):
    with open(filename, 'rb') as file:
        await message.answer_document(file)

def search_vk_content(keyword, offset=0, count=100):
    try:
        max_posts = 500
        posts = []
        total_posts = 0
        while total_posts < max_posts:
            search_url = f"https://api.vk.com/method/newsfeed.search?q={keyword}&count={count}&offset={offset}&filters=wall,post,video,photo,audio,doc,note,poll,page,link,market&access_token={VK_ACCESS_TOKEN}&v=5.131"
            response = requests.get(search_url).json()
            items = response.get('response', {}).get('items', [])
            if not items:
                break
            posts.extend(items)
            total_posts += len(items)
            offset += count
        return posts[:max_posts]  # Return up to 1000 posts
    except Exception as e:
        logger.error(f"Error searching VK content: {e}")
        return []

@dp.callback_query_handler(lambda query: query.data == "vk_search_type", state="*")
async def search_vk_type_callback(query: types.CallbackQuery, state: FSMContext):
    await Form.vk_search_type.set()
    keyboard_markup = InlineKeyboardMarkup()
    keyboard_markup.row(
        InlineKeyboardButton("–û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ üîé", callback_data="vk_search"),
        InlineKeyboardButton("–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤ üìã", callback_data="vk_parse"),
    )
    keyboard_markup.row(
        InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="back_so_vk")
    )
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:", reply_markup=keyboard_markup)
    await query.answer(text="", show_alert=True)


@dp.callback_query_handler(lambda query: query.data == "vk_search", state="*")
async def search_vk_callback(query: types.CallbackQuery, state: FSMContext):
    await Form.vk_search.set()
    user_id = query.from_user.id
    if update_request_limit(user_id):
        await Form.vk_search.set()
        message = await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ VK üïµÔ∏è‚Äç‚ôÇÔ∏è:")

        await state.update_data(source="vk")
        await state.update_data(previous_message_id=message.message_id)
        await query.answer(text="", show_alert=True)
        user_id = query.from_user.id
    else:
        await query.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")


@dp.callback_query_handler(lambda query: query.data == "vk_parse", state="*")
async def vk_parse_callback(query: types.CallbackQuery, state: FSMContext):
    await Form.vk_parse.set()
    user_id = query.from_user.id
    if update_request_limit(user_id):
        await Form.vk_parse.set()
        message = await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ VK üïµÔ∏è‚Äç‚ôÇÔ∏è:")

        await state.update_data(source="vk")
        await state.update_data(previous_message_id=message.message_id)
        await query.answer(text="", show_alert=True)
        user_id = query.from_user.id
    else:
        await query.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")


@dp.message_handler(state=Form.vk_parse)
async def vk_parse_execute(message: types.Message, state: FSMContext):
    keyword = message.text

    await message.delete()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º
    search_message = f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ 500 –ø–æ—Å—Ç–æ–≤ –Ω–∞ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ \"{keyword}\""
    await message.answer(search_message)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º keyword –∏ offset –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(keyword=keyword, offset=0)

    posts = search_vk_content(keyword)
    if posts:
        filename = await send_vk_posts_to_excel(keyword, posts)
        await send_vk_posts_file(message, filename)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–æ—Å—Ç–∞–º–∏
    else:
        await message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî.")
        await state.finish()

async def send_vk_posts_to_excel(keyword: str, posts: list):
    wb = openpyxl.Workbook()
    ws = wb.active

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers = ["–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞", "–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
               "–î–∞—Ç–∞ –≤—ã–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞", "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç"]
    ws.append(headers)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Å—Ç–∞–º
    for post in posts:
        post_text = post.get('text', '')
        if len(post_text) > 100:
            post_text = f"{post_text[:100]}..."
        post_link = f"https://vk.com/wall{post['owner_id']}_{post['id']}"
        likes_count = format_number(post['likes']['count'])
        comments_count = format_number(post['comments']['count'])
        views_count = format_number(post.get('views', {}).get('count', '0'))
        post_date = datetime.fromtimestamp(post['date']).strftime('%Y-%m-%d %H:%M:%S')

        row_data = [post['id'], post_text, likes_count, comments_count, views_count, post_date, post_link]
        ws.append(row_data)

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as tmp_file:
        filename = tmp_file.name
        wb.save(filename)

    return filename

@dp.message_handler(state=Form.vk_search)
async def vk_search_execute(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    sent_posts.clear()
    data = await state.get_data()
    sort_type = data.get('sort_type')

    keyword = message.text

    await message.delete()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º
    search_message = f"–ü–æ—Å—Ç—ã –Ω–∞ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ \"{keyword}\""
    await message.answer(search_message)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º keyword –∏ offset –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(keyword=keyword, offset=0)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤
    posts = search_vk_content(keyword)
    if posts:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
        if sort_type == "date_desc":
            posts.sort(key=lambda x: x['likes']['count'] + x['comments']['count'], reverse=True)
        await send_vk_posts(message, state, keyword, posts, 0)
    else:
        await message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî.")
        await state.finish()


@dp.callback_query_handler(lambda query: query.data == "show_more_posts", state=MyStates.sending_links)
async def show_more_posts(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    keyword = data.get('keyword')
    offset = data.get('offset', 0) + 5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º offset –Ω–∞ 5

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤
    await callback_query.message.answer(f"–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ ‚Ññ{(offset // 5) + 1}")

    posts = search_vk_content(keyword, offset)
    if posts:
        await send_vk_posts(callback_query.message, state, keyword, posts, offset)
        await state.update_data(offset=offset)  # –û–±–Ω–æ–≤–ª—è–µ–º offset –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    else:
        await callback_query.answer("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")
    await callback_query.answer()

    reply_message_id = data.get('reply_message_id')
    if reply_message_id:
        await bot.delete_message(callback_query.message.chat.id, reply_message_id)


@dp.callback_query_handler(lambda query: query.data == "no_show_more_posts", state=MyStates.sending_links)
async def no_show_more_posts(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–û–∫–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await start(callback_query.message, state)
    await MyStates.waiting_for_keyword.set()
    await callback_query.answer(text="", show_alert=True)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    data = await state.get_data()
    reply_message_id = data.get('reply_message_id')
    if reply_message_id:
        await bot.delete_message(callback_query.message.chat.id, reply_message_id)
    await callback_query.message.delete()


async def unique_pages(urls):
    async with aiohttp.ClientSession() as session:
        tasks = [fetch_and_hash(session, url) for url in urls]
        results = await asyncio.gather(*tasks)
    unique_content = {}
    for url, content_hash in results:
        if content_hash and content_hash not in unique_content:
            unique_content[content_hash] = url
    return list(unique_content.values())


async def fetch_and_hash(session, url):
    try:
        async with session.get(url) as response:
            if response.status == 200:
                content = await response.text()
                content_hash = hashlib.md5(content.encode('utf-8')).hexdigest()
                return url, content_hash
    except Exception as e:
        print(f"Error fetching URL {url}: {e}")
    return url, None


def canonicalize_url(url):
    parsed_url = urlparse(url)
    parsed_query = parse_qs(parsed_url.query, keep_blank_values=True)
    query = parsed_url.query
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∫–∞–Ω–æ–Ω–∏–∑–∞—Ü–∏–∏ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    canonical_url = urlunparse(parsed_url._replace(query=query))
    return canonical_url


async def send_vk_posts(message: types.Message, state: FSMContext, keyword: str, posts: list, offset: int):
    if not posts:
        await message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    data = await state.get_data()
    sent_count = data.get('sent_count', 0)

    for post in posts[sent_count:sent_count + 5]:
        if post['id'] not in sent_posts:
            post_text = post.get('text', '')
            if len(post_text) > 100:
                post_text = f"{post_text[:100]}..."
            post_link = f"https://vk.com/wall{post['owner_id']}_{post['id']}"
            likes_count = format_number(post['likes']['count'])
            comments_count = format_number(post['comments']['count'])
            views_count = format_number(post.get('views', {}).get('count', '0'))
            message_text = f"{post_text}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç: {post_link}\n‚ù§Ô∏è {likes_count}\n‚úâÔ∏è {comments_count}\nüëÄ {views_count}"

            if 'attachments' in post:
                for attachment in post['attachments']:
                    if attachment['type'] == 'video':
                        video = attachment['video']
                        video_link = f"https://vk.com/video{video['owner_id']}_{video['id']}"
                        message_text += f"\nüìπ –í–∏–¥–µ–æ: {video_link}"

            await message.answer(message_text)
            sent_posts.add(post['id'])
            sent_count += 1

    await state.update_data(sent_count=sent_count)

    if sent_count < len(posts):
        keyboard_markup = InlineKeyboardMarkup()
        keyboard_markup.row(
            InlineKeyboardButton("–î–∞", callback_data="show_more_posts"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="no_show_more_posts")
        )
        reply_message = await message.answer("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ –ø–æ—Å—Ç—ã?", reply_markup=keyboard_markup)
        await MyStates.sending_links.set()

        await state.update_data(reply_message_id=reply_message.message_id)
    else:
        await message.answer("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")
        await state.finish()



# ____________________________________________Telegram_________________________________________________________________________________________________
client = None

async def connect_telegram_client():
    global client
    if client is None or not client.is_connected():
        client = TelegramClient(session_file_name, api_id, api_hash)
        await client.start()
        if not client.is_user_authorized():
            await client.send_code_request('phone_number')
            await client.sign_in('phone_number', input('Enter code: '))

@dp.callback_query_handler(lambda query: query.data == "telegram_publics", state="*")
async def search_telegram_publics_callback(query: types.CallbackQuery, state: FSMContext):
    user_id = query.from_user.id

    remaining_requests = get_remaining_requests(user_id)
    if remaining_requests == 0:
        await query.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return

    if update_request_limit(user_id):
        message = await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–º –ü–∞–±–ª–∏–∫–∞—Ö üì¢:")
        await MyStates.waiting_for_telegram_publics_keyword.set()
        await state.update_data(previous_message_id=message.message_id)
        await query.answer(text="", show_alert=True)
    else:
        await query.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")

async def send_posts(chat_id, posts, offset, state):
    for post in posts:
        truncated_text = post['text'][:200] + '...' if len(post['text']) > 200 else post['text']
        await bot.send_message(chat_id, f"{truncated_text}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç: {post['link']}")
    await state.update_data(offset=offset + 10)

async def search_telegram_publics(inner_client, keyword, message, state: FSMContext):
    found_posts = []
    try:
        data = await state.get_data()
        previous_message_id = data.get('previous_message_id')
        if previous_message_id:
            await bot.delete_message(message.chat.id, previous_message_id)
        await bot.delete_message(message.chat.id, message.message_id)

        await message.answer(f"–ü–æ–∏—Å–∫ –Ω–∞—á–∞—Ç –ø–æ \"{keyword}\". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ 15-25 —Å–µ–∫—É–Ω–¥.")

        dialogs = await inner_client.get_dialogs()

        async def search_dialog(dialog):
            nonlocal found_posts
            if isinstance(dialog.entity, Channel) and dialog.entity.username:
                try:
                    async for msg in inner_client.iter_messages(dialog.entity, search=keyword, limit=200):
                        if keyword.lower() in msg.text.lower():
                            post_link = f"https://t.me/{dialog.entity.username}/{msg.id}"
                            found_posts.append({
                                'text': msg.text,
                                'link': post_link,
                                'date': msg.date
                            })
                            if len(found_posts) >= 200:
                                break
                except FloodWaitError as e:
                    await asyncio.sleep(e.seconds + 5)

        tasks = [search_dialog(dialog) for dialog in dialogs]
        await asyncio.gather(*tasks)
    except AuthKeyUnregisteredError:
        await inner_client.start()
    except ConnectionError:
        raise

    found_posts.sort(key=lambda x: x['date'], reverse=True)
    return found_posts

@dp.message_handler(state=MyStates.waiting_for_telegram_publics_keyword)
async def process_keyword_telegram_publics(message: types.Message, state: FSMContext):
    keyword = message.text
    try:
        async with TelegramClient('anon', api_id, api_hash) as inner_client:
            posts = await search_telegram_publics(inner_client, keyword, message, state)
            if posts:
                await state.update_data(found_posts=posts, keyword=keyword)
                await send_posts(message.chat.id, posts[:10], 0, state)
                if len(posts) > 10:
                    await message.answer("–•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –µ—â–µ –ø–æ—Å—Ç—ã?", reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton("–î–∞", callback_data="show_more_posts"),
                        InlineKeyboardButton("–ù–µ—Ç", callback_data="no_show_more_posts")
                    ))
                await state.update_data(previous_message_id=message.message_id)
                try:
                    data = await state.get_data()
                    previous_message_id = data.get('previous_message_id')
                    if previous_message_id:
                        await bot.delete_message(message.chat.id, previous_message_id)
                    await bot.delete_message(message.chat.id, message.message_id)
                except aiogram.utils.exceptions.MessageToDeleteNotFound:
                    pass
            else:
                await message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî.")
    except ConnectionError:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

@dp.callback_query_handler(lambda query: query.data == "show_more_posts", state="*")
async def show_more_posts_callback(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer("–°–ª–µ–¥—É—é—â–∏–µ –ø–æ—Å—Ç—ã")
    await bot.delete_message(query.message.chat.id, query.message.message_id)
    data = await state.get_data()
    offset = data.get("offset", 0)
    keyword = data.get("keyword")
    found_posts = data.get("found_posts", [])
    try:
        if found_posts:
            await send_posts(query.message.chat.id, found_posts[offset:offset + 10], offset, state)
            if len(found_posts) > offset + 10:
                await query.message.answer("–•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –µ—â–µ –ø–æ—Å—Ç—ã?", reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("–î–∞", callback_data="show_more_posts"),
                    InlineKeyboardButton("–ù–µ—Ç", callback_data="no_show_more_posts")
                ))
            else:
                await query.message.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.")
        else:
            async with TelegramClient('anon', api_id, api_hash) as inner_client:
                posts = await search_telegram_publics(inner_client, keyword, query.message, state)
                if posts:
                    await send_posts(query.message.chat.id, posts[offset:offset + 10], offset, state)
                    if len(posts) > offset + 10:
                        await query.message.answer("–•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –µ—â–µ –ø–æ—Å—Ç—ã?", reply_markup=InlineKeyboardMarkup().add(
                            InlineKeyboardButton("–î–∞", callback_data="show_more_posts"),
                            InlineKeyboardButton("–ù–µ—Ç", callback_data="no_show_more_posts")
                        ))
                    else:
                        await query.message.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.")
                else:
                    await query.message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤.")
    except ConnectionError:
        await query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º Telegram.")

@dp.callback_query_handler(lambda query: query.data == "no_show_more_posts", state="*")
async def no_show_more_posts_callback(query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    previous_message_id = data.get('previous_message_id')

    try:
        if previous_message_id:
            await bot.delete_message(query.message.chat.id, previous_message_id)
    except aiogram.utils.exceptions.MessageToDeleteNotFound:
        pass

    await bot.delete_message(query.message.chat.id, query.message.message_id)
    await show_menu(query.message)


# ____________________________________________youtube_________________________________________________________________________________________________
async def search_youtube(query, page_token=None):
    search_url = "https://www.googleapis.com/youtube/v3/search"
    params = {
        'part': 'snippet',
        'q': query,
        'key': YOUTUBE_API_KEY,
        'maxResults': 5,
        'type': 'video'
    }
    # –î–æ–±–∞–≤–ª—è–µ–º pageToken –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ None
    if page_token is not None:
        params['pageToken'] = page_token

    async with aiohttp.ClientSession() as session:
        async with session.get(search_url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                return data['items'], data.get('nextPageToken')  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Ç–æ–∫–µ–Ω —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            else:
                print("Failed to fetch YouTube data")
                return [], None


@dp.callback_query_handler(lambda query: query.data == "youtube", state="*")
async def prompt_youtube_search(query: types.CallbackQuery, state: FSMContext):
    user_id = query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
    remaining_requests = get_remaining_requests(user_id)
    if remaining_requests == 0:
        await query.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return

    # –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –æ—Å—Ç–∞–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã
    if update_request_limit(user_id):
        # –ï—Å–ª–∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã –µ—Å—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        await MyStates.waiting_for_youtube_search.set()
        message = await query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ YouTube:")

        await state.update_data(source="youtube")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–∏—Å–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(previous_message_id=message.message_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await query.answer(text="", show_alert=True)  # –£–±–∏—Ä–∞–µ–º —Å–≤–µ—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    else:
        await query.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")


async def get_youtube_video_statistics(video_id):
    statistics_url = "https://www.googleapis.com/youtube/v3/videos"
    params = {
        'part': 'statistics',
        'id': video_id,
        'key': YOUTUBE_API_KEY
    }

    async with aiohttp.ClientSession() as session:
        async with session.get(statistics_url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–¥–µ–æ (–ª–∞–π–∫–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã)
                return data['items'][0]['statistics']
            else:
                print("Failed to fetch video statistics")
                return {}


@dp.message_handler(state=MyStates.waiting_for_youtube_search)
async def perform_youtube_search(message: types.Message, state: FSMContext):
    query = message.text

    # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    previous_message_id = data.get('previous_message_id')

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if previous_message_id:
        await message.bot.delete_message(message.chat.id, previous_message_id)

    # –£–¥–∞–ª—è–µ–º —Ç–∞–∫–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    await message.delete()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º
    search_message = f"–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É \"{query}\""
    await message.answer(search_message)

    videos, next_page_token = await search_youtube(query)

    if not videos:
        await message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ.")
        await state.finish()
    else:
        for video in videos:
            video_id = video['id']['videoId']
            title = video['snippet']['title']
            response_message = f"üìπ [{title}](https://www.youtube.com/watch?v={video_id})\n"
            statistics = await get_youtube_video_statistics(video_id)
            likes = int(statistics.get('likeCount', 0))
            comments = int(statistics.get('commentCount', 0))
            views = int(statistics.get('viewCount', 0))

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è
            likes_str = format_number(likes)
            comments_str = format_number(comments)
            views_str = format_number(views)

            response_message += f"–õ–∞–π–∫–∏ ‚ù§Ô∏è: {likes_str}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ‚úâÔ∏è: {comments_str}\n–ü—Ä–æ—Å–º–æ—Ç—Ä—ã üëÄ: {views_str}"
            await message.answer(response_message, parse_mode="Markdown")

        if next_page_token:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await MyStates.waiting_for_next_page.set()
            await state.update_data(query=query, next_page_token=next_page_token)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ –µ—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            markup = InlineKeyboardMarkup(row_width=2).add(
                InlineKeyboardButton("–î–∞", callback_data="show_more_youtube"),
                InlineKeyboardButton("–ù–µ—Ç", callback_data="no_show_more_youtube")
            )
            await message.answer("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?", reply_markup=markup)


def format_number(number):
    if isinstance(number, int):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
        if number < 10000:
            return str(number)
        elif number < 1000000:
            return f"{number // 1000} —Ç—ã—Å."
        elif number < 1000000000:
            return f"{number // 1000000} –º–ª–Ω."
        else:
            return f"{number // 1000000000} –º–ª–¥."
    else:
        return str(number)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º



@dp.callback_query_handler(text="no_show_more_youtube", state=MyStates.waiting_for_next_page)
async def no_more_youtube(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback_query.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.reset_state()
    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await start(callback_query.message, state)

@dp.callback_query_handler(text="show_more_youtube", state=MyStates.waiting_for_next_page)
async def show_more_youtube(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    query = user_data['query']
    next_page_token = user_data['next_page_token']
    offset = user_data.get('offset', 0) + 5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º offset –Ω–∞ 5

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page_number = (offset // 5) + 1

    # Fetch the next set of videos using the YouTube API
    videos, next_page_token = await search_youtube(query, next_page_token)

    if not videos:
        # If there are no more videos, inform the user and reset the state
        await callback_query.message.answer("–ë–æ–ª—å—à–µ –≤–∏–¥–µ–æ –Ω–µ—Ç.")
        await state.reset_state()
        return

    # Send each video as a separate message
    for i, video in enumerate(videos, start=offset + 1):
        video_id = video['id']['videoId']
        title = video['snippet']['title']
        response_message = f"–°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ ‚Ññ{page_number}, –≤–∏–¥–µ–æ {i}: [{title}](https://www.youtube.com/watch?v={video_id})\n"
        statistics = await get_youtube_video_statistics(video_id)
        likes = int(statistics.get('likeCount', 0))
        comments = int(statistics.get('commentCount', 0))
        views = int(statistics.get('viewCount', 0))

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è
        likes_str = format_number(likes)
        comments_str = format_number(comments)
        views_str = format_number(views)

        response_message += f"–õ–∞–π–∫–∏ ‚ù§Ô∏è: {likes_str}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ‚úâÔ∏è: {comments_str}\n–ü—Ä–æ—Å–º–æ—Ç—Ä—ã üëÄ: {views_str}"
        await callback_query.message.answer(response_message, parse_mode="Markdown")

    # If there is a token for more pages, provide the option to fetch more videos
    if next_page_token:
        # Delete the original message with the "Show more" button
        await callback_query.message.delete()
        # Update the inline keyboard to include "Yes" and "No" options for fetching more videos
        markup = InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("–î–∞", callback_data="show_more_youtube"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="no_show_more_youtube")
        )
        await callback_query.message.answer("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?", reply_markup=markup)
        await state.update_data(query=query, next_page_token=next_page_token, offset=offset)
    else:
        # If there are no more pages, inform the user and reset the state
        await callback_query.message.answer("–ë–æ–ª—å—à–µ –≤–∏–¥–µ–æ –Ω–µ—Ç.")
        await state.reset_state()

# ____________________________________________instagram_________________________________________________________________________________________________

@dp.callback_query_handler(lambda query: query.data == "instagram", state="*")
async def instagram_search_callback(query: types.CallbackQuery, state: FSMContext):
    user_id = query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
    remaining_requests = get_remaining_requests(user_id)
    if remaining_requests == 0:
        await query.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return

    # –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –æ—Å—Ç–∞–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã
    if update_request_limit(user_id):
        # –ï—Å–ª–∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã –µ—Å—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        message = await query.message.answer("–ë–µ—Ç–∞ —Ç–µ—Å—Ç\n–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ Instagram:")
        await Form.instagram_search.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ Instagram
        await state.update_data(source="instagram")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–∏—Å–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(previous_message_id=message.message_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await query.answer(text="", show_alert=True)  # –£–±–∏—Ä–∞–µ–º —Å–≤–µ—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    else:
        await query.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")


async def search_instagram_posts(keyword, page=0):
    formatted_keyword = quote_plus(keyword)
    all_instagram_links = []
    while page < 50:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        google_search_url = (
            f"https://www.google.com/search?q=site:instagram.com/p/+{formatted_keyword}"
            f"&start={page * 50}"
        )
        headers = {'User-Agent': 'Mozilla/5.0'}

        async with aiohttp.ClientSession() as session:
            async with session.get(google_search_url, headers=headers) as response:
                if response.status == 200:
                    html = await response.text()
                    soup = BeautifulSoup(html, 'html.parser')
                    links = soup.find_all('a', href=True)
                    instagram_links = []

                    for link in links:
                        href = link['href']
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏ –≤ href
                        if 'https://www.instagram.com/p/' in href:
                            # –ò—â–µ–º –Ω—É–∂–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ –≤ —Å—Å—ã–ª–∫–µ
                            match = re.search(r'/url\?q=(https://www\.instagram\.com/p/[^&]+)', href)
                            if match:
                                clean_url = match.group(1)
                                instagram_links.append(clean_url)

                    all_instagram_links.extend(instagram_links)

                    next_page = soup.select_one(
                        'a#pnnext'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
                    )
                    if next_page:
                        page += 1
                    else:
                        break
    return list(set(all_instagram_links)), False


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –≤ Instagram
@dp.message_handler(state=Form.instagram_search)
async def instagram_search_execute(message: types.Message, state: FSMContext):
    keyword = message.text
    page = 0  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Google
    all_posts = []

    # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    previous_message_id = data.get('previous_message_id')

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if previous_message_id:
        await message.bot.delete_message(message.chat.id, previous_message_id)

    # –£–¥–∞–ª—è–µ–º —Ç–∞–∫–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    await message.delete()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º
    search_message = f"–ü–æ–∏—Å–∫ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º—É –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É \"{keyword}\""
    await message.answer(search_message)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    posts, has_next_page = await search_instagram_posts(keyword, page)
    all_posts.extend(posts)

    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
    while has_next_page and len(all_posts) < 50:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ 50
        page += 1
        posts, has_next_page = await search_instagram_posts(keyword, page)
        all_posts.extend(posts)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    if all_posts:
        await state.update_data(posts=all_posts, position=0)
        await InstagramPagination.showing_results.set()
        await show_results(message, state)
    else:
        await message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –≤ Instagram –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        await state.finish()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def show_results(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    posts = user_data['posts']
    position = user_data['position']
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ —Ä–∞–∑
    for index in range(position, min(position + 5, len(posts))):
        markup = InlineKeyboardMarkup().add(
            InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø–æ—Å—Ç", url=posts[index])
        )
        await message.answer(f"–ü–æ—Å—Ç {index + 1}", reply_markup=markup)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –ø–æ—Å—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞
    if position + 5 < len(posts):
        await InstagramPagination.confirm_continuation.set()
        markup = InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("–î–∞", callback_data="yes_more"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="no_more")
        )
        await message.answer("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ?", reply_markup=markup)
    else:
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –ø–æ—Å—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
        markup = InlineKeyboardMarkup().add(
            InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        )
        await message.answer("–ë–æ–ª—å—à–µ –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç.", reply_markup=markup)
        await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ–∫–∞–∑ –µ—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
@dp.callback_query_handler(text="yes_more", state=InstagramPagination.confirm_continuation)
async def confirm_yes_more(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    user_data = await state.get_data()
    position = user_data['position'] + 5
    await state.update_data(position=position)
    await InstagramPagination.showing_results.set()
    await show_results(callback_query.message, state)


@dp.callback_query_handler(text="no_more", state=InstagramPagination.confirm_continuation)
async def confirm_no_more(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    await callback_query.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await state.finish()
    await start(callback_query.message, state)


# ____________________________________________google_search_________________________________________________________________________________________________


@dp.callback_query_handler(lambda query: query.data == "google_search", state="*")
async def google_search_callback(query: types.CallbackQuery, state: FSMContext):
    user_id = query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
    remaining_requests = get_remaining_requests(user_id)
    if remaining_requests == 0:
        await query.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return

    # –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –æ—Å—Ç–∞–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã
    if update_request_limit(user_id):
        update_request_limit(user_id)
        # –ï—Å–ª–∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã –µ—Å—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        markup = InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("–û–±—ã—á–Ω—ã–π üåê", callback_data="google_normal_search"),
            InlineKeyboardButton("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üñºÔ∏è", callback_data="google_image_search"),
            InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="back_so_vk")
        )
        await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:", reply_markup=markup)
        await SearchType.choosing_google_search_type.set()
        await query.answer(text="", show_alert=True)  # –£–±–∏—Ä–∞–µ–º —Å–≤–µ—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    else:
        await query.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")



@dp.callback_query_handler(lambda query: query.data == "google_normal_search",
                           state=SearchType.choosing_google_search_type)
async def set_google_normal_search(query: types.CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
    await query.message.delete()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    previous_message_id = query.message.message_id
    await state.update_data(google_search_type="normal", previous_message_id=previous_message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    message = await query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∞–π—Ç–æ–≤ –≤ google:")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.update_data(source="google_normal_search", input_message_id=message.message_id)
    await MyStates.waiting_for_google_search_keyword.set()


@dp.callback_query_handler(lambda query: query.data == "google_image_search",
                           state=SearchType.choosing_google_search_type)
async def set_google_image_search(query: types.CallbackQuery, state: FSMContext):
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
    await query.message.delete()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    previous_message_id = query.message.message_id
    await state.update_data(google_search_type="images", previous_message_id=previous_message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    message = await query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ google:")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.update_data(source="google_image_search", input_message_id=message.message_id)
    await MyStates.waiting_for_google_search_keyword.set()


api_keys = [
    {"key": "AIzaSyBdwmhpxjdGX8VWKaLvPB309sm0JktCK7U", "is_limit_reached": False},
    {"key": "AIzaSyA4m7Ms0PIozHHc5CuBsi6T0Y-pqK0gKsw", "is_limit_reached": False},
    {"key": "AIzaSyBVMuHW3rRuSA-nHukGZ11H5IoVtB0z1tI", "is_limit_reached": False}
]

current_api_key_index = 0  # –ù–∞—á–Ω–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –∫–ª—é—á–∞ –≤ —Å–ø–∏—Å–∫–µ


async def google_search(query: str, cse_id: str, start_index=1, search_type=None):
    global current_api_key_index
    while current_api_key_index < len(api_keys):
        api_key = api_keys[current_api_key_index]["key"]
        search_url = "https://www.googleapis.com/customsearch/v1"
        params = {
            'key': api_key,
            'cx': cse_id,
            'q': query,
            'start': start_index
        }

        if search_type == "images":
            params['searchType'] = 'image'
            params['num'] = 10  # –ú–∞–∫—Å–∏–º—É–º 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ –∑–∞–ø—Ä–æ—Å

        async with aiohttp.ClientSession() as session:
            async with session.get(search_url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    items = data.get('items', [])
                    next_index = data.get('queries', {}).get('nextPage', [{}])[0].get('startIndex', None)
                    return items, next_index
                elif response.status in (403, 429):  # Handling both rate limit and quota exceeded errors
                    logging.warning(
                        f"API key limit reached or too many requests: HTTP {response.status}. Switching key...")
                    api_keys[current_api_key_index]["is_limit_reached"] = True
                    current_api_key_index = (current_api_key_index + 1) % len(
                        api_keys)  # Rotate to next key or start over
                    if all(key['is_limit_reached'] for key in api_keys):
                        logging.error("All API keys have reached their limit.")
                        return [], None
                else:
                    logging.error(f"Google search error: HTTP {response.status}")
                    return [], None
    logging.error("No valid API keys available.")
    return [], None


# Add this import
@dp.message_handler(state=MyStates.waiting_for_google_search_keyword)
async def google_search_execute(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    keyword = message.text
    google_search_type = user_data.get("google_search_type", "normal")

    # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    previous_message_id = data.get('previous_message_id')

    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if previous_message_id:
            await message.bot.delete_message(message.chat.id, previous_message_id)
    except MessageToDeleteNotFound:
        pass  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    input_message_id = user_data.get("input_message_id")
    if input_message_id:
        await message.bot.delete_message(message.chat.id, input_message_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º
    search_message = f"–ü–æ–∏—Å–∫ google –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É \"{keyword}\""
    await message.answer(search_message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    loading_message = await message.answer("–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º
    await message.delete()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º
    await state.update_data(keyword=keyword)

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é google_search —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
    results, next_index = await google_search(keyword, YOUR_CSE_ID, search_type=google_search_type)

    if not results:
        await loading_message.edit_text("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await asyncio.sleep(0.5)  # –î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await show_menu(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await loading_message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await state.finish()
        return

    if google_search_type == "images":
        image_urls = [item['link'] for item in results]
        valid_images = await prepare_images(image_urls)
        if valid_images:
            await bot.send_media_group(message.chat.id, media=valid_images)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    else:
        response_message = "\n".join([f"{item['title']}\n{item['link']}" for item in results])
        await message.answer(response_message, disable_web_page_preview=True)

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    await loading_message.delete()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞
    if next_index:
        markup = InlineKeyboardMarkup().add(
            InlineKeyboardButton("–î–∞", callback_data="get_more_google"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="no_more_google")
        )
        await message.answer("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?", reply_markup=markup)
        await state.update_data(next_index=next_index)
    else:
        await message.answer("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")
        await show_menu(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.finish()


def clean_url(url):
    # –†–∞–∑–±–∏—Ä–∞–µ–º URL –∏ –æ—á–∏—â–∞–µ–º –µ–≥–æ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    parsed = urlparse(url)
    # –°–æ–∑–¥–∞–µ–º —á–∏—Å—Ç—ã–π URL –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    clean_parsed = parsed._replace(query="")
    return urlunparse(clean_parsed)


MAX_IMAGE_SIZE = 25 * 5000 * 5000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (10 –ú–ë)


async def download_and_convert_image(session, url, attempt=1, max_attempts=1):
    try:
        timeout = ClientTimeout(total=5)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ —á—Ç–µ–Ω–∏—è –≤ 5 —Å–µ–∫—É–Ω–¥
        async with session.get(url, timeout=timeout) as response:
            if response.status == 200:
                image_data = await response.read()
                image = Image.open(io.BytesIO(image_data))
                image_converted = image.convert('RGB')
                buffer = io.BytesIO()
                image_converted.save(buffer, format='PNG')
                buffer.seek(0)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                if len(buffer.getvalue()) > MAX_IMAGE_SIZE:
                    logging.warning(f"Image size too large: {len(buffer.getvalue())} bytes")
                    return None
                return types.InputMediaPhoto(media=types.InputFile(buffer, filename="image.png"))
            else:
                raise Exception(f"HTTP error {response.status}")
    except Exception as e:
        logging.error(f"Error loading image from {url}: {e}")
        if attempt < max_attempts:
            logging.info(f"Retrying... Attempt {attempt + 1} of {max_attempts}")
            return await download_and_convert_image(session, url, attempt + 1, max_attempts)
        else:
            return None


async def prepare_images(urls):
    async with ClientSession() as session:
        tasks = [download_and_convert_image(session, url) for url in urls]
        results = await asyncio.gather(*tasks)
        return [result for result in results if result is not None]


async def send_image_or_convert(message, url):
    # Split the URL to get the file extension
    file_extension = url.split('.')[-1].split('?')[0].lower()
    if file_extension in ['png', 'jpeg', 'gif', 'jpg']:
        try:
            # If the image is already in a supported format, try to send it directly
            await message.answer_photo(photo=url)
        except Exception as e:
            logging.error(f"Error sending image: {e}. Sending as a link instead.")
            await message.answer(url)
    else:
        # If the format is not supported, try to convert and send as PNG
        logging.info(f"Unsupported image format for {url}. Attempting to convert to PNG.")
        async with ClientSession() as session:
            image_buffer = await download_and_convert_image(session, url)
            if image_buffer:
                await message.answer_photo(photo=image_buffer)
            else:
                await message.answer("Failed to load image.")


async def prepare_image(session, url):
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PNG
        return await download_and_convert_image(session, url)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None


@dp.callback_query_handler(lambda query: query.data == "get_more_google",
                           state=MyStates.waiting_for_google_search_keyword)
async def get_more_google(callback_query: types.CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    message_to_delete = await callback_query.message.edit_reply_markup(reply_markup=None)

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_message = await callback_query.message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")

    user_data = await state.get_data()
    keyword = user_data.get('keyword')
    google_search_type = user_data.get('google_search_type', 'normal')
    next_index = user_data.get('next_index')

    if next_index:
        results, next_index = await google_search(keyword, YOUR_CSE_ID, start_index=next_index,
                                                  search_type=google_search_type)

        if not results:
            await loading_message.edit_text("–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            await asyncio.sleep(0.5)
            await loading_message.delete()
            await message_to_delete.delete()
            await show_menu(callback_query.message)
            await state.finish()
            return

        if google_search_type == "images":
            image_urls = [item['link'] for item in results]
            valid_images = await prepare_images(image_urls)
            if valid_images:
                await bot.send_media_group(callback_query.message.chat.id, media=valid_images)
            else:
                await loading_message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        else:
            response_message = "\n".join([f"{item['title']}\n{item['link']}" for item in results])
            await callback_query.message.answer(response_message, disable_web_page_preview=True)

        await loading_message.edit_text("–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
        await asyncio.sleep(0.5)
        await loading_message.delete()
        await message_to_delete.delete()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞
        if next_index:
            markup = InlineKeyboardMarkup().add(
                InlineKeyboardButton("–î–∞", callback_data="get_more_google"),
                InlineKeyboardButton("–ù–µ—Ç", callback_data="no_more_google")
            )
            show_more_message = await callback_query.message.answer("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?", reply_markup=markup)
            await state.update_data(next_index=next_index, last_message_id=show_more_message.message_id)
        else:
            await callback_query.message.answer("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")
            await show_menu(callback_query.message)
            await state.finish()
    else:
        await loading_message.edit_text("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")
        await asyncio.sleep(0.5)
        await loading_message.delete()
        await message_to_delete.delete()
        await show_menu(callback_query.message)
        await state.finish()


@dp.callback_query_handler(lambda query: query.data == "no_more_google",
                           state=MyStates.waiting_for_google_search_keyword)
async def no_more_google(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–∏—Å–∫–∞
    await callback_query.message.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    await state.finish()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await start(callback_query.message, state)


def generate_similar_queries(query):
    # Example synonym mapping
    synonyms = {
        "example": ["sample", "instance", "illustration"]
    }
    similar_queries = [query]  # Include the original query

    # Append synonyms to the list of queries if available
    for synonym in synonyms.get(query, []):
        similar_queries.append(synonym)

    return similar_queries

# ____________________________________________telegraph_________________________________________________________________________________________________
@dp.message_handler(state=MyStates.waiting_for_telegraph_keyword)
async def process_keyword(message: types.Message, state: FSMContext):
    query = message.text
    query = cyrillic_to_latin(query)
    await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º
    bot = dp.bot  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    urls = await find_telegraph_pages(query, message, state, bot)  # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é
    if urls:
        await message.answer(f"–ù–∞–π–¥–µ–Ω–æ {len(urls)} —Å—Å—ã–ª–æ–∫.")
        await send_links_in_parts(message, urls, state)
    else:
        await message.answer("–°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        await start(message, state)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω


@dp.callback_query_handler(lambda query: query.data == "telegram", state="*")
async def choose_telegram_search_type(query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("–û–±—ã—á–Ω—ã–π üåê", callback_data="with_photos"),
        InlineKeyboardButton("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üñºÔ∏è", callback_data="all"),
        InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="back_so_vk")
    )
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –Ω–∞ telegra.ph:", reply_markup=keyboard)
    await SearchType.choosing_search_type.set()
    await query.answer(text="", show_alert=True)


@dp.callback_query_handler(lambda query: query.data in ["with_photos", "all"], state=SearchType.choosing_search_type)
async def telegraph_search_type_chosen(query: types.CallbackQuery, state: FSMContext):
    search_type = query.data
    await state.update_data(search_type=search_type)
    await query.message.delete()
    await choose_year(query, state)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≥–æ–¥–∞


@dp.callback_query_handler(lambda query: query.data == "telegraph", state="*")
async def telegraph_search_start(query: CallbackQuery, state: FSMContext):
    user_id = query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
    remaining_requests = get_remaining_requests(user_id)
    if remaining_requests == 0:
        await query.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return

    # –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –æ—Å—Ç–∞–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã
    if update_request_limit(user_id):
        update_request_limit(user_id)
        # –ï—Å–ª–∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã –µ—Å—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        keyboard = InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("–û–±—ã—á–Ω—ã–π üåê", callback_data="all"),
            InlineKeyboardButton("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üñºÔ∏è", callback_data="with_photos"),
            InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="back_so_vk")
        )
        await query.message.answer("–•–æ—Ç–∏—Ç–µ –∏—Å–∫–∞—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—å–∏ –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏?", reply_markup=keyboard)
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await SearchType.choosing_search_type.set()
        await query.answer(text="", show_alert=True)
    else:
        await query.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")


@dp.callback_query_handler(lambda query: query.data == "start_telegraph_search", state="*")
async def choose_year(query: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(row_width=2)
    for year in range(2015, 2025):
        keyboard.insert(InlineKeyboardButton(str(year), callback_data=f"year_{year}"))
    keyboard.insert(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞:", reply_markup=keyboard)
    await SearchType.choosing_year.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞


@dp.callback_query_handler(lambda query: query.data.startswith('year_'), state=SearchType.choosing_year)
async def handle_year_choice(query: CallbackQuery, state: FSMContext):
    chosen_year = int(query.data.split('_')[1])
    await state.update_data(start_year=chosen_year)
    await query.message.delete()
    message = await query.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ–¥: {chosen_year}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ telegra.ph:")
    await state.update_data(year_message_id=message.message_id)
    await MyStates.waiting_for_telegraph_keyword.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–∞–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞
@dp.callback_query_handler(lambda query: query.data == "back", state=SearchType.choosing_year)
async def back_to_search_type(query: CallbackQuery):
    await query.message.delete()
    keyboard = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("–û–±—ã—á–Ω—ã–π", callback_data="all"),
        InlineKeyboardButton("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", callback_data="with_photos")
    )
    await query.message.answer("–•–æ—Ç–∏—Ç–µ –∏—Å–∫–∞—Ç—å —Å—Ç–∞—Ç—å–∏ —Ç–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏–ª–∏ –≤—Å–µ?", reply_markup=keyboard)
    await SearchType.choosing_search_type.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞


async def fetch_url(session, url, progress_callback, update_interval=10, search_type="all"):
    try:
        timeout = aiohttp.ClientTimeout(total=600)
        async with session.get(url, timeout=timeout) as response:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ —É—Å–ø–µ—à–Ω—ã–π
            if response.status in [200, 202]:  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–º–∏
                content = await response.text()
                # –î–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º BeautifulSoup
                soup = BeautifulSoup(content, 'html.parser')
                if search_type == "with_photos" and not soup.find('img'):
                    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
                    await progress_callback(url, False, update_interval)
                    return None
                # –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω—ã, —Å–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—Ö–µ
                await progress_callback(url, True, update_interval)
                return url
            else:
                # –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –Ω–µ —É—Å–ø–µ—Ö, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
                await progress_callback(url, False, update_interval)
                return None
    except ClientError as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å–æ–æ–±—â–∞–µ–º –æ –Ω–µ—É–¥–∞—á–µ
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {url}: {e}")
        await progress_callback(url, False, update_interval)
        return None
    except asyncio.TimeoutError:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–∞–π–º–∞—É—Ç–∞ –∏ —Å–æ–æ–±—â–∞–µ–º –æ –Ω–µ—É–¥–∞—á–µ
        print(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {url}")
        await progress_callback(url, False, update_interval)
        return None

async def update_progress_message(progress_message, completed, total, current_query, force=False):
    if force or completed % max(1, total // 20) == 0:
        progress_percent = int((completed / total) * 100)
        progress_bar = "‚ñ†" * (progress_percent // 10) + "‚ñ°" * (10 - progress_percent // 10)
        progress_text = f"–ü–æ–∏—Å–∫: {current_query}\n–ó–∞–≥—Ä—É–∑–∫–∞: [{progress_bar}] {progress_percent}%"
        try:
            await progress_message.edit_text(progress_text)
            await asyncio.sleep(1)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ: {e}")

async def find_telegraph_pages(query: str, message: types.Message, state: FSMContext, bot: Bot) -> list:
    user_data = await state.get_data()
    chosen_year = user_data.get('start_year', 2015)
    search_type = user_data.get('search_type', 'all')
    current_year = datetime.now().year

    if chosen_year < 2015 or chosen_year > current_year:
        await message.answer(f"–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –æ—Ç 2015 –¥–æ {current_year}.")
        return []

    start_date = datetime(chosen_year, 1, 1)
    end_date = datetime(chosen_year, 12, 31)
    if chosen_year == current_year:
        end_date = datetime(current_year, datetime.now().month, datetime.now().day)

    total_days = (end_date - start_date).days + 1
    urls = []
    valid_urls = set()
    completed = 0

    try:
        user_data = await state.get_data()
        year_message_id = user_data.get('year_message_id')
        await bot.delete_message(message.chat.id, year_message_id)
    except Exception as e:
        print(f"Failed to delete progress message: {e}")

    async def progress_callback(url, found, update_interval):
        nonlocal completed
        if found:
            urls.append(url)
            if await check_page_content_for_exclusions(url, exclusion_list):
                valid_urls.add(url)
        completed += 1
        await update_progress_message(progress_message, completed, total_days, query, completed % update_interval == 0)

    progress_message = await bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...")
    await state.update_data(progress_message_id=progress_message.message_id, start_year=chosen_year)

    async with aiohttp.ClientSession() as session:
        tasks = []
        for single_date in (start_date + timedelta(n) for n in range(total_days)):
            url = f"https://telegra.ph/{query}-{single_date.strftime('%m-%d')}"
            tasks.append(fetch_url(session, url, progress_callback, 10, search_type))

        await asyncio.gather(*tasks)

    await update_progress_message(progress_message, completed, total_days, query, True)

    return list(valid_urls)


# –§—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ
def cyrillic_to_latin(text):
    translit_dict = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch', '—ä': '',
        '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya', ' ': '-', '-': '', '_': '',
        ',': '', '.': '', '¬´': '', '¬ª': '', '‚Äî': '', '?': '', '!': '', '@': '', '#': '',
        '$': '', '%': '', '^': '', '&': '', '*': '', '(': '', ')': '', '=': '', '+': '',
        ';': '', ':': '', '\'': '', '"': '', '\\': '', '/': '', '|': '', '[': '', ']': '',
        '{': '', '}': '', '<': '', '>': '', '‚Ññ': ''
    }
    return ''.join(translit_dict.get(char, char) for char in text.lower())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –µ—â–µ"
@dp.callback_query_handler(text="get_more", state=MyStates.sending_links)
async def get_more_links(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    urls = data.get('urls', [])
    current_position = data.get('current_position', 0)
    current_page = data.get('current_page', 1)
    part_size = 10  # –†–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä—É—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞ —Ä–∞–∑

    if current_position < len(urls):
        end_position = min(current_position + part_size, len(urls))
        next_links_text = f"–°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ ‚Ññ{current_page + 1}"
        await state.update_data(current_page=current_page + 1)
        await send_next_links(callback_query.message, state, next_links_text)
        await state.update_data(current_position=end_position)

        if end_position >= len(urls):
            await callback_query.message.edit_reply_markup()
        await callback_query.answer()
    else:
        await callback_query.answer("–ë–æ–ª—å—à–µ —Å—Å—ã–ª–æ–∫ –Ω–µ—Ç.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–æ–∫
@dp.callback_query_handler(lambda query: query.data == "no_more", state=MyStates.sending_links)
async def no_more_links(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id, text="", show_alert=False)
    previous_message_id = (await state.get_data()).get('previous_message_id')
    if previous_message_id:
        await bot.delete_message(callback_query.message.chat.id, previous_message_id)
    await callback_query.message.delete()
    await start(callback_query.message, state)
    await state.finish()

async def check_page_content_for_exclusions(url, exclusion_list):
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url) as response:
                content = await response.text()
                for exclusion in exclusion_list:
                    if exclusion in content:
                        return False
                return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {url}: {e}")
            return False

async def send_next_links(message: types.Message, state: FSMContext, next_links_text: str):
    user_data = await state.get_data()
    urls = user_data.get('urls', [])
    current_position = user_data.get('current_position', 0)
    sent_urls_count = 0  # –°—á—ë—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö URL

    while sent_urls_count < 10 and current_position < len(urls):
        url = urls[current_position]
        if url not in sent_telegraph_links and await check_page_content_for_exclusions(url, exclusion_list):
            try:
                await message.answer(url)
                sent_telegraph_links.add(url)  # –î–æ–±–∞–≤–ª—è–µ–º URL –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
                sent_urls_count += 1
            except RetryAfter as e:
                await asyncio.sleep(e.timeout)  # –û–∂–∏–¥–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
                await message.answer(url)
                sent_telegraph_links.add(url)
                sent_urls_count += 1
        current_position += 1

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_position=current_position)

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–¥–∞ –µ—Å—Ç—å –µ—â—ë URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∫–∞–∑–∞—Ç—å –µ—â—ë
    if current_position < len(urls):
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ "–î–∞" –∏ "–ù–µ—Ç"
        markup = InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("–î–∞", callback_data="get_more"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="no_more")
        )
        await message.answer(next_links_text, reply_markup=markup)
        await MyStates.sending_links.set()
    else:
        await message.answer("–í—Å–µ —Å—Å—ã–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        await state.finish()
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await start(message, state)

async def send_links_in_parts(message: Message, urls: list, state: FSMContext):
    await state.update_data(urls=urls, current_position=0)
    current_page = 1  # –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    next_links_text = f"–°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ ‚Ññ{current_page}"  # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await state.update_data(current_page=current_page)
    await send_next_links(message, state, next_links_text)

@dp.callback_query_handler(lambda query: query.data == "get_more", state=MyStates.sending_links)
async def get_more_links(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get('current_page', 1) + 1
    await state.update_data(current_page=current_page)
    next_links_text = f"–°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ ‚Ññ{current_page}"
    await send_next_links(callback_query.message, state, next_links_text)
    await callback_query.answer()

@dp.message_handler(state=MyStates.waiting_for_telegraph_keyword)
async def process_keyword(message: types.Message, state: FSMContext):
    query = message.text
    query = cyrillic_to_latin(query)
    await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º
    bot = dp.bot  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    urls = await find_telegraph_pages(query, message, state, bot)  # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é
    if urls:
        await message.answer(f"–ù–∞–π–¥–µ–Ω–æ {len(urls)} —Å—Å—ã–ª–æ–∫.")
        await send_links_in_parts(message, urls, state)
    else:
        await message.answer("–°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        await start(message, state)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω



async def main():
    await dp.start_polling()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)